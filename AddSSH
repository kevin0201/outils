# Configuration accès ssh à partir de linux comme défini dans l'aide de github

## Check if a ssh key already exists

```
ls -al ~/.ssh
```

## Generating a new SSH key

    1. Open Terminal.

    2. Paste the text below, substituting in your GitHub email address.
    
```
    ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
```

    This creates a new ssh key, using the provided email as a label.

```
    Generating public/private rsa key pair.
```

    3. When you're prompted to "Enter a file in which to save the key," press Enter. This accepts the default file location.

```
    Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]
```

    4. At the prompt, type a secure passphrase. For more information, see "Working with SSH key passphrases".

```
    Enter passphrase (empty for no passphrase): [Type a passphrase]
    Enter same passphrase again: [Type passphrase again]
```
    
## Adding your SSH key to the ssh-agent

Before adding a new SSH key to the ssh-agent to manage your keys, you should have checked for existing SSH keys and generated a new SSH key.

    1. Start the ssh-agent in the background.

```
    eval "$(ssh-agent -s)"
    Agent pid 59566
```

    2. Add your SSH key to the ssh-agent. If you are using an existing SSH key rather than generating a new SSH key, 
    you'll need to replace id_rsa in the command with the name of your existing private key file.

```
    $ ssh-add ~/.ssh/id_rsa
```

    3. Add the SSH key to your GitHub account.
    
## Adding a new SSH key to your GitHub account

To configure your GitHub account to use your new (or existing) SSH key, you'll also need to add it to your GitHub account.

Before adding a new SSH key to your GitHub account, you should have:

    **Checked for existing SSH keys**
    **Generated a new SSH key and added it to the ssh-agent**
    
1. Copy the SSH key to your clipboard.

If your SSH key file has a different name than the example code, modify the filename to match your current setup. 
When copying your key, don't add any newlines or whitespace.

```
$ sudo apt-get install xclip
# Downloads and installs xclip. If you don't have `apt-get`, you might need to use another installer (like `yum`)

$ xclip -sel clip < ~/.ssh/id_rsa.pub
# Copies the contents of the id_rsa.pub file to your clipboard
```

2. In the upper-right corner of any page, click your profile photo, then click Settings. 

3. In the user settings sidebar, click SSH and GPG keys. 

4. Click New SSH key or Add SSH key. 

5. In the "Title" field, add a descriptive label for the new key. For example, if you're using a personal Mac, you might call this key "Personal MacBook Air".

6. Paste your key into the "Key" field. 

7. Click Add SSH key. 

8. If prompted, confirm your GitHub password. 


# Working with SSH key passphrases

You can secure your SSH keys and configure an authentication agent so that you won't have to reenter your passphrase every time you use your SSH keys.

With SSH keys, if someone gains access to your computer, they also gain access to every system that uses that key. To add an extra layer of security, you can add a passphrase to your SSH key. You can use ssh-agent to securely save your passphrase so you don't have to reenter it.

# Adding or changing a passphrase

You can change the passphrase for an existing private key without regenerating the keypair by typing the following command:

```
ssh-keygen -p
# Start the SSH key creation process
Enter file in which the key is (/Users/you/.ssh/id_rsa): [Hit enter]
Key has comment '/Users/you/.ssh/id_rsa'
Enter new passphrase (empty for no passphrase): [Type new passphrase]
Enter same passphrase again: [One more time for luck]
Your identification has been saved with the new passphrase.
```
If your key already has a passphrase, you will be prompted to enter it before you can change to a new passphrase.
